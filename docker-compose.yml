# File: docker-compose.yml
services:
  # Redis Cluster (simplified single-node for dev)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # MySQL
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: flash_sale
      MYSQL_USER: flashuser
      MYSQL_PASSWORD: flashpass
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./schema:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password --max-connections=500
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Kafka UI (development tool)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # API Server Instance 1
  api-1:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      NODE_ENV: development
      NODE_ID: 1
      PORT: 3000
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      MYSQL_HOST: mysql
      MYSQL_USER: flashuser
      MYSQL_PASSWORD: flashpass
      MYSQL_DATABASE: flash_sale
    ports:
      - "3001:3000"
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
    command: npm run dev

  # API Server Instance 2
  api-2:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      NODE_ENV: development
      NODE_ID: 2
      PORT: 3000
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      MYSQL_HOST: mysql
      MYSQL_USER: flashuser
      MYSQL_PASSWORD: flashpass
      MYSQL_DATABASE: flash_sale
    ports:
      - "3002:3000"
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
    command: npm run dev

  # Order Worker
  order-worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      NODE_ENV: development
      NODE_ID: 100
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      MYSQL_HOST: mysql
      MYSQL_USER: flashuser
      MYSQL_PASSWORD: flashpass
      MYSQL_DATABASE: flash_sale
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
    command: node src/workers/order-worker.js

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-1
      - api-2

  # Prometheus (monitoring)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana (visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  redis-data:
  mysql-data:
  prometheus-data:
  grafana-data:

